// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package openrtb

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson48f1e884DecodeGithubComStokitoOpenrtbEasyjsonV3(in *jlexer.Lexer, out *Audio) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mimes":
			if in.IsNull() {
				in.Skip()
				out.MIMEs = nil
			} else {
				in.Delim('[')
				if out.MIMEs == nil {
					if !in.IsDelim(']') {
						out.MIMEs = make([]string, 0, 4)
					} else {
						out.MIMEs = []string{}
					}
				} else {
					out.MIMEs = (out.MIMEs)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.MIMEs = append(out.MIMEs, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "minduration":
			out.MinDuration = int(in.Int())
		case "maxduration":
			out.MaxDuration = int(in.Int())
		case "protocols":
			if in.IsNull() {
				in.Skip()
				out.Protocols = nil
			} else {
				in.Delim('[')
				if out.Protocols == nil {
					if !in.IsDelim(']') {
						out.Protocols = make([]Protocol, 0, 8)
					} else {
						out.Protocols = []Protocol{}
					}
				} else {
					out.Protocols = (out.Protocols)[:0]
				}
				for !in.IsDelim(']') {
					var v2 Protocol
					v2 = Protocol(in.Int())
					out.Protocols = append(out.Protocols, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "startdelay":
			out.StartDelay = StartDelay(in.Int())
		case "sequence":
			out.Sequence = int(in.Int())
		case "battr":
			if in.IsNull() {
				in.Skip()
				out.BlockedAttrs = nil
			} else {
				in.Delim('[')
				if out.BlockedAttrs == nil {
					if !in.IsDelim(']') {
						out.BlockedAttrs = make([]CreativeAttribute, 0, 8)
					} else {
						out.BlockedAttrs = []CreativeAttribute{}
					}
				} else {
					out.BlockedAttrs = (out.BlockedAttrs)[:0]
				}
				for !in.IsDelim(']') {
					var v3 CreativeAttribute
					v3 = CreativeAttribute(in.Int())
					out.BlockedAttrs = append(out.BlockedAttrs, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "maxextended":
			out.MaxExtended = int(in.Int())
		case "minbitrate":
			out.MinBitrate = int(in.Int())
		case "maxbitrate":
			out.MaxBitrate = int(in.Int())
		case "delivery":
			if in.IsNull() {
				in.Skip()
				out.Delivery = nil
			} else {
				in.Delim('[')
				if out.Delivery == nil {
					if !in.IsDelim(']') {
						out.Delivery = make([]ContentDelivery, 0, 8)
					} else {
						out.Delivery = []ContentDelivery{}
					}
				} else {
					out.Delivery = (out.Delivery)[:0]
				}
				for !in.IsDelim(']') {
					var v4 ContentDelivery
					v4 = ContentDelivery(in.Int())
					out.Delivery = append(out.Delivery, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "companionad":
			if in.IsNull() {
				in.Skip()
				out.CompanionAds = nil
			} else {
				in.Delim('[')
				if out.CompanionAds == nil {
					if !in.IsDelim(']') {
						out.CompanionAds = make([]Banner, 0, 0)
					} else {
						out.CompanionAds = []Banner{}
					}
				} else {
					out.CompanionAds = (out.CompanionAds)[:0]
				}
				for !in.IsDelim(']') {
					var v5 Banner
					easyjson48f1e884DecodeGithubComStokitoOpenrtbEasyjsonV31(in, &v5)
					out.CompanionAds = append(out.CompanionAds, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "api":
			if in.IsNull() {
				in.Skip()
				out.APIs = nil
			} else {
				in.Delim('[')
				if out.APIs == nil {
					if !in.IsDelim(']') {
						out.APIs = make([]APIFramework, 0, 8)
					} else {
						out.APIs = []APIFramework{}
					}
				} else {
					out.APIs = (out.APIs)[:0]
				}
				for !in.IsDelim(']') {
					var v6 APIFramework
					v6 = APIFramework(in.Int())
					out.APIs = append(out.APIs, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "companiontype":
			if in.IsNull() {
				in.Skip()
				out.CompanionTypes = nil
			} else {
				in.Delim('[')
				if out.CompanionTypes == nil {
					if !in.IsDelim(']') {
						out.CompanionTypes = make([]CompanionType, 0, 8)
					} else {
						out.CompanionTypes = []CompanionType{}
					}
				} else {
					out.CompanionTypes = (out.CompanionTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v7 CompanionType
					v7 = CompanionType(in.Int())
					out.CompanionTypes = append(out.CompanionTypes, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "maxseq":
			out.MaxSequence = int(in.Int())
		case "feed":
			out.Feed = FeedType(in.Int())
		case "stitched":
			out.Stitched = int(in.Int())
		case "nvol":
			out.VolumeNorm = VolumeNorm(in.Int())
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson48f1e884EncodeGithubComStokitoOpenrtbEasyjsonV3(out *jwriter.Writer, in Audio) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"mimes\":"
		out.RawString(prefix[1:])
		if in.MIMEs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.MIMEs {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	if in.MinDuration != 0 {
		const prefix string = ",\"minduration\":"
		out.RawString(prefix)
		out.Int(int(in.MinDuration))
	}
	if in.MaxDuration != 0 {
		const prefix string = ",\"maxduration\":"
		out.RawString(prefix)
		out.Int(int(in.MaxDuration))
	}
	if len(in.Protocols) != 0 {
		const prefix string = ",\"protocols\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v10, v11 := range in.Protocols {
				if v10 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v11))
			}
			out.RawByte(']')
		}
	}
	if in.StartDelay != 0 {
		const prefix string = ",\"startdelay\":"
		out.RawString(prefix)
		out.Int(int(in.StartDelay))
	}
	if in.Sequence != 0 {
		const prefix string = ",\"sequence\":"
		out.RawString(prefix)
		out.Int(int(in.Sequence))
	}
	if len(in.BlockedAttrs) != 0 {
		const prefix string = ",\"battr\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v12, v13 := range in.BlockedAttrs {
				if v12 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v13))
			}
			out.RawByte(']')
		}
	}
	if in.MaxExtended != 0 {
		const prefix string = ",\"maxextended\":"
		out.RawString(prefix)
		out.Int(int(in.MaxExtended))
	}
	if in.MinBitrate != 0 {
		const prefix string = ",\"minbitrate\":"
		out.RawString(prefix)
		out.Int(int(in.MinBitrate))
	}
	if in.MaxBitrate != 0 {
		const prefix string = ",\"maxbitrate\":"
		out.RawString(prefix)
		out.Int(int(in.MaxBitrate))
	}
	if len(in.Delivery) != 0 {
		const prefix string = ",\"delivery\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v14, v15 := range in.Delivery {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v15))
			}
			out.RawByte(']')
		}
	}
	if len(in.CompanionAds) != 0 {
		const prefix string = ",\"companionad\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v16, v17 := range in.CompanionAds {
				if v16 > 0 {
					out.RawByte(',')
				}
				easyjson48f1e884EncodeGithubComStokitoOpenrtbEasyjsonV31(out, v17)
			}
			out.RawByte(']')
		}
	}
	if len(in.APIs) != 0 {
		const prefix string = ",\"api\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v18, v19 := range in.APIs {
				if v18 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v19))
			}
			out.RawByte(']')
		}
	}
	if len(in.CompanionTypes) != 0 {
		const prefix string = ",\"companiontype\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v20, v21 := range in.CompanionTypes {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v21))
			}
			out.RawByte(']')
		}
	}
	if in.MaxSequence != 0 {
		const prefix string = ",\"maxseq\":"
		out.RawString(prefix)
		out.Int(int(in.MaxSequence))
	}
	if in.Feed != 0 {
		const prefix string = ",\"feed\":"
		out.RawString(prefix)
		out.Int(int(in.Feed))
	}
	if in.Stitched != 0 {
		const prefix string = ",\"stitched\":"
		out.RawString(prefix)
		out.Int(int(in.Stitched))
	}
	if in.VolumeNorm != 0 {
		const prefix string = ",\"nvol\":"
		out.RawString(prefix)
		out.Int(int(in.VolumeNorm))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		out.RawString(prefix)
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Audio) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson48f1e884EncodeGithubComStokitoOpenrtbEasyjsonV3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Audio) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson48f1e884EncodeGithubComStokitoOpenrtbEasyjsonV3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Audio) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson48f1e884DecodeGithubComStokitoOpenrtbEasyjsonV3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Audio) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson48f1e884DecodeGithubComStokitoOpenrtbEasyjsonV3(l, v)
}
func easyjson48f1e884DecodeGithubComStokitoOpenrtbEasyjsonV31(in *jlexer.Lexer, out *Banner) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "w":
			out.Width = int(in.Int())
		case "h":
			out.Height = int(in.Int())
		case "format":
			if in.IsNull() {
				in.Skip()
				out.Formats = nil
			} else {
				in.Delim('[')
				if out.Formats == nil {
					if !in.IsDelim(']') {
						out.Formats = make([]Format, 0, 1)
					} else {
						out.Formats = []Format{}
					}
				} else {
					out.Formats = (out.Formats)[:0]
				}
				for !in.IsDelim(']') {
					var v22 Format
					easyjson48f1e884DecodeGithubComStokitoOpenrtbEasyjsonV32(in, &v22)
					out.Formats = append(out.Formats, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "wmax":
			out.WidthMax = int(in.Int())
		case "hmax":
			out.HeightMax = int(in.Int())
		case "wmin":
			out.WidthMin = int(in.Int())
		case "hmin":
			out.HeightMin = int(in.Int())
		case "id":
			out.ID = string(in.String())
		case "btype":
			if in.IsNull() {
				in.Skip()
				out.BlockedTypes = nil
			} else {
				in.Delim('[')
				if out.BlockedTypes == nil {
					if !in.IsDelim(']') {
						out.BlockedTypes = make([]BannerType, 0, 8)
					} else {
						out.BlockedTypes = []BannerType{}
					}
				} else {
					out.BlockedTypes = (out.BlockedTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v23 BannerType
					v23 = BannerType(in.Int())
					out.BlockedTypes = append(out.BlockedTypes, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "battr":
			if in.IsNull() {
				in.Skip()
				out.BlockedAttrs = nil
			} else {
				in.Delim('[')
				if out.BlockedAttrs == nil {
					if !in.IsDelim(']') {
						out.BlockedAttrs = make([]CreativeAttribute, 0, 8)
					} else {
						out.BlockedAttrs = []CreativeAttribute{}
					}
				} else {
					out.BlockedAttrs = (out.BlockedAttrs)[:0]
				}
				for !in.IsDelim(']') {
					var v24 CreativeAttribute
					v24 = CreativeAttribute(in.Int())
					out.BlockedAttrs = append(out.BlockedAttrs, v24)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pos":
			out.Position = AdPosition(in.Int())
		case "mimes":
			if in.IsNull() {
				in.Skip()
				out.MIMEs = nil
			} else {
				in.Delim('[')
				if out.MIMEs == nil {
					if !in.IsDelim(']') {
						out.MIMEs = make([]string, 0, 4)
					} else {
						out.MIMEs = []string{}
					}
				} else {
					out.MIMEs = (out.MIMEs)[:0]
				}
				for !in.IsDelim(']') {
					var v25 string
					v25 = string(in.String())
					out.MIMEs = append(out.MIMEs, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "topframe":
			out.TopFrame = int(in.Int())
		case "expdir":
			if in.IsNull() {
				in.Skip()
				out.ExpDirs = nil
			} else {
				in.Delim('[')
				if out.ExpDirs == nil {
					if !in.IsDelim(']') {
						out.ExpDirs = make([]ExpDir, 0, 8)
					} else {
						out.ExpDirs = []ExpDir{}
					}
				} else {
					out.ExpDirs = (out.ExpDirs)[:0]
				}
				for !in.IsDelim(']') {
					var v26 ExpDir
					v26 = ExpDir(in.Int())
					out.ExpDirs = append(out.ExpDirs, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "api":
			if in.IsNull() {
				in.Skip()
				out.APIs = nil
			} else {
				in.Delim('[')
				if out.APIs == nil {
					if !in.IsDelim(']') {
						out.APIs = make([]APIFramework, 0, 8)
					} else {
						out.APIs = []APIFramework{}
					}
				} else {
					out.APIs = (out.APIs)[:0]
				}
				for !in.IsDelim(']') {
					var v27 APIFramework
					v27 = APIFramework(in.Int())
					out.APIs = append(out.APIs, v27)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "vcm":
			out.VCM = int(in.Int())
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson48f1e884EncodeGithubComStokitoOpenrtbEasyjsonV31(out *jwriter.Writer, in Banner) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Width != 0 {
		const prefix string = ",\"w\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Width))
	}
	if in.Height != 0 {
		const prefix string = ",\"h\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Height))
	}
	if len(in.Formats) != 0 {
		const prefix string = ",\"format\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v28, v29 := range in.Formats {
				if v28 > 0 {
					out.RawByte(',')
				}
				easyjson48f1e884EncodeGithubComStokitoOpenrtbEasyjsonV32(out, v29)
			}
			out.RawByte(']')
		}
	}
	if in.WidthMax != 0 {
		const prefix string = ",\"wmax\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.WidthMax))
	}
	if in.HeightMax != 0 {
		const prefix string = ",\"hmax\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.HeightMax))
	}
	if in.WidthMin != 0 {
		const prefix string = ",\"wmin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.WidthMin))
	}
	if in.HeightMin != 0 {
		const prefix string = ",\"hmin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.HeightMin))
	}
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if len(in.BlockedTypes) != 0 {
		const prefix string = ",\"btype\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v30, v31 := range in.BlockedTypes {
				if v30 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v31))
			}
			out.RawByte(']')
		}
	}
	if len(in.BlockedAttrs) != 0 {
		const prefix string = ",\"battr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v32, v33 := range in.BlockedAttrs {
				if v32 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v33))
			}
			out.RawByte(']')
		}
	}
	if in.Position != 0 {
		const prefix string = ",\"pos\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Position))
	}
	if len(in.MIMEs) != 0 {
		const prefix string = ",\"mimes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v34, v35 := range in.MIMEs {
				if v34 > 0 {
					out.RawByte(',')
				}
				out.String(string(v35))
			}
			out.RawByte(']')
		}
	}
	if in.TopFrame != 0 {
		const prefix string = ",\"topframe\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TopFrame))
	}
	if len(in.ExpDirs) != 0 {
		const prefix string = ",\"expdir\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v36, v37 := range in.ExpDirs {
				if v36 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v37))
			}
			out.RawByte(']')
		}
	}
	if len(in.APIs) != 0 {
		const prefix string = ",\"api\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v38, v39 := range in.APIs {
				if v38 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v39))
			}
			out.RawByte(']')
		}
	}
	if in.VCM != 0 {
		const prefix string = ",\"vcm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.VCM))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson48f1e884DecodeGithubComStokitoOpenrtbEasyjsonV32(in *jlexer.Lexer, out *Format) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "w":
			out.Width = int(in.Int())
		case "h":
			out.Height = int(in.Int())
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson48f1e884EncodeGithubComStokitoOpenrtbEasyjsonV32(out *jwriter.Writer, in Format) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Width != 0 {
		const prefix string = ",\"w\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Width))
	}
	if in.Height != 0 {
		const prefix string = ",\"h\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Height))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}
