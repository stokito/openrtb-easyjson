// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package openrtb

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson7ebaa60bDecodeGithubComStokitoOpenrtbEasyjson(in *jlexer.Lexer, out *Impression) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "banner":
			if in.IsNull() {
				in.Skip()
				out.Banner = nil
			} else {
				if out.Banner == nil {
					out.Banner = new(Banner)
				}
				(*out.Banner).UnmarshalEasyJSON(in)
			}
		case "video":
			if in.IsNull() {
				in.Skip()
				out.Video = nil
			} else {
				if out.Video == nil {
					out.Video = new(Video)
				}
				easyjson7ebaa60bDecodeGithubComStokitoOpenrtbEasyjson1(in, out.Video)
			}
		case "audio":
			if in.IsNull() {
				in.Skip()
				out.Audio = nil
			} else {
				if out.Audio == nil {
					out.Audio = new(Audio)
				}
				(*out.Audio).UnmarshalEasyJSON(in)
			}
		case "native":
			if in.IsNull() {
				in.Skip()
				out.Native = nil
			} else {
				if out.Native == nil {
					out.Native = new(Native)
				}
				easyjson7ebaa60bDecodeGithubComStokitoOpenrtbEasyjson2(in, out.Native)
			}
		case "pmp":
			if in.IsNull() {
				in.Skip()
				out.PMP = nil
			} else {
				if out.PMP == nil {
					out.PMP = new(PMP)
				}
				easyjson7ebaa60bDecodeGithubComStokitoOpenrtbEasyjson3(in, out.PMP)
			}
		case "displaymanager":
			out.DisplayManager = string(in.String())
		case "displaymanagerver":
			out.DisplayManagerVersion = string(in.String())
		case "instl":
			out.Interstitial = int(in.Int())
		case "tagid":
			out.TagID = string(in.String())
		case "bidfloor":
			out.BidFloor = float64(in.Float64())
		case "bidfloorcur":
			out.BidFloorCurrency = string(in.String())
		case "secure":
			out.Secure = int(in.Int())
		case "exp":
			out.Exp = int(in.Int())
		case "iframebuster":
			if in.IsNull() {
				in.Skip()
				out.IFrameBusters = nil
			} else {
				in.Delim('[')
				if out.IFrameBusters == nil {
					if !in.IsDelim(']') {
						out.IFrameBusters = make([]string, 0, 4)
					} else {
						out.IFrameBusters = []string{}
					}
				} else {
					out.IFrameBusters = (out.IFrameBusters)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.IFrameBusters = append(out.IFrameBusters, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7ebaa60bEncodeGithubComStokitoOpenrtbEasyjson(out *jwriter.Writer, in Impression) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Banner != nil {
		const prefix string = ",\"banner\":"
		out.RawString(prefix)
		(*in.Banner).MarshalEasyJSON(out)
	}
	if in.Video != nil {
		const prefix string = ",\"video\":"
		out.RawString(prefix)
		easyjson7ebaa60bEncodeGithubComStokitoOpenrtbEasyjson1(out, *in.Video)
	}
	if in.Audio != nil {
		const prefix string = ",\"audio\":"
		out.RawString(prefix)
		(*in.Audio).MarshalEasyJSON(out)
	}
	if in.Native != nil {
		const prefix string = ",\"native\":"
		out.RawString(prefix)
		easyjson7ebaa60bEncodeGithubComStokitoOpenrtbEasyjson2(out, *in.Native)
	}
	if in.PMP != nil {
		const prefix string = ",\"pmp\":"
		out.RawString(prefix)
		easyjson7ebaa60bEncodeGithubComStokitoOpenrtbEasyjson3(out, *in.PMP)
	}
	if in.DisplayManager != "" {
		const prefix string = ",\"displaymanager\":"
		out.RawString(prefix)
		out.String(string(in.DisplayManager))
	}
	if in.DisplayManagerVersion != "" {
		const prefix string = ",\"displaymanagerver\":"
		out.RawString(prefix)
		out.String(string(in.DisplayManagerVersion))
	}
	if in.Interstitial != 0 {
		const prefix string = ",\"instl\":"
		out.RawString(prefix)
		out.Int(int(in.Interstitial))
	}
	if in.TagID != "" {
		const prefix string = ",\"tagid\":"
		out.RawString(prefix)
		out.String(string(in.TagID))
	}
	if in.BidFloor != 0 {
		const prefix string = ",\"bidfloor\":"
		out.RawString(prefix)
		out.Float64(float64(in.BidFloor))
	}
	if in.BidFloorCurrency != "" {
		const prefix string = ",\"bidfloorcur\":"
		out.RawString(prefix)
		out.String(string(in.BidFloorCurrency))
	}
	if in.Secure != 0 {
		const prefix string = ",\"secure\":"
		out.RawString(prefix)
		out.Int(int(in.Secure))
	}
	if in.Exp != 0 {
		const prefix string = ",\"exp\":"
		out.RawString(prefix)
		out.Int(int(in.Exp))
	}
	if len(in.IFrameBusters) != 0 {
		const prefix string = ",\"iframebuster\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v2, v3 := range in.IFrameBusters {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		out.RawString(prefix)
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Impression) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7ebaa60bEncodeGithubComStokitoOpenrtbEasyjson(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Impression) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7ebaa60bEncodeGithubComStokitoOpenrtbEasyjson(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Impression) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7ebaa60bDecodeGithubComStokitoOpenrtbEasyjson(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Impression) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7ebaa60bDecodeGithubComStokitoOpenrtbEasyjson(l, v)
}
func easyjson7ebaa60bDecodeGithubComStokitoOpenrtbEasyjson3(in *jlexer.Lexer, out *PMP) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "private_auction":
			out.Private = int(in.Int())
		case "deals":
			if in.IsNull() {
				in.Skip()
				out.Deals = nil
			} else {
				in.Delim('[')
				if out.Deals == nil {
					if !in.IsDelim(']') {
						out.Deals = make([]Deal, 0, 0)
					} else {
						out.Deals = []Deal{}
					}
				} else {
					out.Deals = (out.Deals)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Deal
					easyjson7ebaa60bDecodeGithubComStokitoOpenrtbEasyjson4(in, &v4)
					out.Deals = append(out.Deals, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7ebaa60bEncodeGithubComStokitoOpenrtbEasyjson3(out *jwriter.Writer, in PMP) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Private != 0 {
		const prefix string = ",\"private_auction\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Private))
	}
	if len(in.Deals) != 0 {
		const prefix string = ",\"deals\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Deals {
				if v5 > 0 {
					out.RawByte(',')
				}
				easyjson7ebaa60bEncodeGithubComStokitoOpenrtbEasyjson4(out, v6)
			}
			out.RawByte(']')
		}
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson7ebaa60bDecodeGithubComStokitoOpenrtbEasyjson4(in *jlexer.Lexer, out *Deal) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "bidfloor":
			out.BidFloor = float64(in.Float64())
		case "bidfloorcur":
			out.BidFloorCurrency = string(in.String())
		case "wseat":
			if in.IsNull() {
				in.Skip()
				out.Seats = nil
			} else {
				in.Delim('[')
				if out.Seats == nil {
					if !in.IsDelim(']') {
						out.Seats = make([]string, 0, 4)
					} else {
						out.Seats = []string{}
					}
				} else {
					out.Seats = (out.Seats)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Seats = append(out.Seats, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "wadomain":
			if in.IsNull() {
				in.Skip()
				out.AdvDomains = nil
			} else {
				in.Delim('[')
				if out.AdvDomains == nil {
					if !in.IsDelim(']') {
						out.AdvDomains = make([]string, 0, 4)
					} else {
						out.AdvDomains = []string{}
					}
				} else {
					out.AdvDomains = (out.AdvDomains)[:0]
				}
				for !in.IsDelim(']') {
					var v8 string
					v8 = string(in.String())
					out.AdvDomains = append(out.AdvDomains, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "at":
			out.AuctionType = int(in.Int())
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7ebaa60bEncodeGithubComStokitoOpenrtbEasyjson4(out *jwriter.Writer, in Deal) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.BidFloor != 0 {
		const prefix string = ",\"bidfloor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.BidFloor))
	}
	if in.BidFloorCurrency != "" {
		const prefix string = ",\"bidfloorcur\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BidFloorCurrency))
	}
	if len(in.Seats) != 0 {
		const prefix string = ",\"wseat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v9, v10 := range in.Seats {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.String(string(v10))
			}
			out.RawByte(']')
		}
	}
	if len(in.AdvDomains) != 0 {
		const prefix string = ",\"wadomain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v11, v12 := range in.AdvDomains {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	if in.AuctionType != 0 {
		const prefix string = ",\"at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.AuctionType))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson7ebaa60bDecodeGithubComStokitoOpenrtbEasyjson2(in *jlexer.Lexer, out *Native) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "request":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Request).UnmarshalJSON(data))
			}
		case "ver":
			out.Version = string(in.String())
		case "api":
			if in.IsNull() {
				in.Skip()
				out.APIs = nil
			} else {
				in.Delim('[')
				if out.APIs == nil {
					if !in.IsDelim(']') {
						out.APIs = make([]APIFramework, 0, 8)
					} else {
						out.APIs = []APIFramework{}
					}
				} else {
					out.APIs = (out.APIs)[:0]
				}
				for !in.IsDelim(']') {
					var v13 APIFramework
					v13 = APIFramework(in.Int())
					out.APIs = append(out.APIs, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "battr":
			if in.IsNull() {
				in.Skip()
				out.BlockedAttrs = nil
			} else {
				in.Delim('[')
				if out.BlockedAttrs == nil {
					if !in.IsDelim(']') {
						out.BlockedAttrs = make([]CreativeAttribute, 0, 8)
					} else {
						out.BlockedAttrs = []CreativeAttribute{}
					}
				} else {
					out.BlockedAttrs = (out.BlockedAttrs)[:0]
				}
				for !in.IsDelim(']') {
					var v14 CreativeAttribute
					v14 = CreativeAttribute(in.Int())
					out.BlockedAttrs = append(out.BlockedAttrs, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7ebaa60bEncodeGithubComStokitoOpenrtbEasyjson2(out *jwriter.Writer, in Native) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"request\":"
		out.RawString(prefix[1:])
		out.Raw((in.Request).MarshalJSON())
	}
	if in.Version != "" {
		const prefix string = ",\"ver\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	if len(in.APIs) != 0 {
		const prefix string = ",\"api\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v15, v16 := range in.APIs {
				if v15 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v16))
			}
			out.RawByte(']')
		}
	}
	if len(in.BlockedAttrs) != 0 {
		const prefix string = ",\"battr\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v17, v18 := range in.BlockedAttrs {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v18))
			}
			out.RawByte(']')
		}
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		out.RawString(prefix)
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson7ebaa60bDecodeGithubComStokitoOpenrtbEasyjson1(in *jlexer.Lexer, out *Video) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mimes":
			if in.IsNull() {
				in.Skip()
				out.MIMEs = nil
			} else {
				in.Delim('[')
				if out.MIMEs == nil {
					if !in.IsDelim(']') {
						out.MIMEs = make([]string, 0, 4)
					} else {
						out.MIMEs = []string{}
					}
				} else {
					out.MIMEs = (out.MIMEs)[:0]
				}
				for !in.IsDelim(']') {
					var v19 string
					v19 = string(in.String())
					out.MIMEs = append(out.MIMEs, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "minduration":
			out.MinDuration = int(in.Int())
		case "maxduration":
			out.MaxDuration = int(in.Int())
		case "protocols":
			if in.IsNull() {
				in.Skip()
				out.Protocols = nil
			} else {
				in.Delim('[')
				if out.Protocols == nil {
					if !in.IsDelim(']') {
						out.Protocols = make([]Protocol, 0, 8)
					} else {
						out.Protocols = []Protocol{}
					}
				} else {
					out.Protocols = (out.Protocols)[:0]
				}
				for !in.IsDelim(']') {
					var v20 Protocol
					v20 = Protocol(in.Int())
					out.Protocols = append(out.Protocols, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "protocol":
			out.Protocol = Protocol(in.Int())
		case "w":
			out.Width = int(in.Int())
		case "h":
			out.Height = int(in.Int())
		case "startdelay":
			out.StartDelay = StartDelay(in.Int())
		case "linearity":
			out.Linearity = VideoLinearity(in.Int())
		case "skip":
			out.Skip = int(in.Int())
		case "skipmin":
			out.SkipMin = int(in.Int())
		case "skipafter":
			out.SkipAfter = int(in.Int())
		case "sequence":
			out.Sequence = int(in.Int())
		case "battr":
			if in.IsNull() {
				in.Skip()
				out.BlockedAttrs = nil
			} else {
				in.Delim('[')
				if out.BlockedAttrs == nil {
					if !in.IsDelim(']') {
						out.BlockedAttrs = make([]CreativeAttribute, 0, 8)
					} else {
						out.BlockedAttrs = []CreativeAttribute{}
					}
				} else {
					out.BlockedAttrs = (out.BlockedAttrs)[:0]
				}
				for !in.IsDelim(']') {
					var v21 CreativeAttribute
					v21 = CreativeAttribute(in.Int())
					out.BlockedAttrs = append(out.BlockedAttrs, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "maxextended":
			out.MaxExtended = int(in.Int())
		case "minbitrate":
			out.MinBitrate = int(in.Int())
		case "maxbitrate":
			out.MaxBitrate = int(in.Int())
		case "boxingallowed":
			if in.IsNull() {
				in.Skip()
				out.BoxingAllowed = nil
			} else {
				if out.BoxingAllowed == nil {
					out.BoxingAllowed = new(int)
				}
				*out.BoxingAllowed = int(in.Int())
			}
		case "playbackmethod":
			if in.IsNull() {
				in.Skip()
				out.PlaybackMethods = nil
			} else {
				in.Delim('[')
				if out.PlaybackMethods == nil {
					if !in.IsDelim(']') {
						out.PlaybackMethods = make([]VideoPlayback, 0, 8)
					} else {
						out.PlaybackMethods = []VideoPlayback{}
					}
				} else {
					out.PlaybackMethods = (out.PlaybackMethods)[:0]
				}
				for !in.IsDelim(']') {
					var v22 VideoPlayback
					v22 = VideoPlayback(in.Int())
					out.PlaybackMethods = append(out.PlaybackMethods, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "delivery":
			if in.IsNull() {
				in.Skip()
				out.Delivery = nil
			} else {
				in.Delim('[')
				if out.Delivery == nil {
					if !in.IsDelim(']') {
						out.Delivery = make([]ContentDelivery, 0, 8)
					} else {
						out.Delivery = []ContentDelivery{}
					}
				} else {
					out.Delivery = (out.Delivery)[:0]
				}
				for !in.IsDelim(']') {
					var v23 ContentDelivery
					v23 = ContentDelivery(in.Int())
					out.Delivery = append(out.Delivery, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pos":
			out.Position = AdPosition(in.Int())
		case "companionad":
			if in.IsNull() {
				in.Skip()
				out.CompanionAds = nil
			} else {
				in.Delim('[')
				if out.CompanionAds == nil {
					if !in.IsDelim(']') {
						out.CompanionAds = make([]Banner, 0, 0)
					} else {
						out.CompanionAds = []Banner{}
					}
				} else {
					out.CompanionAds = (out.CompanionAds)[:0]
				}
				for !in.IsDelim(']') {
					var v24 Banner
					(v24).UnmarshalEasyJSON(in)
					out.CompanionAds = append(out.CompanionAds, v24)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "api":
			if in.IsNull() {
				in.Skip()
				out.APIs = nil
			} else {
				in.Delim('[')
				if out.APIs == nil {
					if !in.IsDelim(']') {
						out.APIs = make([]APIFramework, 0, 8)
					} else {
						out.APIs = []APIFramework{}
					}
				} else {
					out.APIs = (out.APIs)[:0]
				}
				for !in.IsDelim(']') {
					var v25 APIFramework
					v25 = APIFramework(in.Int())
					out.APIs = append(out.APIs, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "companiontype":
			if in.IsNull() {
				in.Skip()
				out.CompanionTypes = nil
			} else {
				in.Delim('[')
				if out.CompanionTypes == nil {
					if !in.IsDelim(']') {
						out.CompanionTypes = make([]CompanionType, 0, 8)
					} else {
						out.CompanionTypes = []CompanionType{}
					}
				} else {
					out.CompanionTypes = (out.CompanionTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v26 CompanionType
					v26 = CompanionType(in.Int())
					out.CompanionTypes = append(out.CompanionTypes, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "placement":
			out.Placement = VideoPlacement(in.Int())
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7ebaa60bEncodeGithubComStokitoOpenrtbEasyjson1(out *jwriter.Writer, in Video) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.MIMEs) != 0 {
		const prefix string = ",\"mimes\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v27, v28 := range in.MIMEs {
				if v27 > 0 {
					out.RawByte(',')
				}
				out.String(string(v28))
			}
			out.RawByte(']')
		}
	}
	if in.MinDuration != 0 {
		const prefix string = ",\"minduration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MinDuration))
	}
	if in.MaxDuration != 0 {
		const prefix string = ",\"maxduration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MaxDuration))
	}
	if len(in.Protocols) != 0 {
		const prefix string = ",\"protocols\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v29, v30 := range in.Protocols {
				if v29 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v30))
			}
			out.RawByte(']')
		}
	}
	if in.Protocol != 0 {
		const prefix string = ",\"protocol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Protocol))
	}
	if in.Width != 0 {
		const prefix string = ",\"w\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Width))
	}
	if in.Height != 0 {
		const prefix string = ",\"h\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Height))
	}
	if in.StartDelay != 0 {
		const prefix string = ",\"startdelay\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.StartDelay))
	}
	if in.Linearity != 0 {
		const prefix string = ",\"linearity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Linearity))
	}
	if in.Skip != 0 {
		const prefix string = ",\"skip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Skip))
	}
	if in.SkipMin != 0 {
		const prefix string = ",\"skipmin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.SkipMin))
	}
	if in.SkipAfter != 0 {
		const prefix string = ",\"skipafter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.SkipAfter))
	}
	if in.Sequence != 0 {
		const prefix string = ",\"sequence\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Sequence))
	}
	if len(in.BlockedAttrs) != 0 {
		const prefix string = ",\"battr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v31, v32 := range in.BlockedAttrs {
				if v31 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v32))
			}
			out.RawByte(']')
		}
	}
	if in.MaxExtended != 0 {
		const prefix string = ",\"maxextended\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MaxExtended))
	}
	if in.MinBitrate != 0 {
		const prefix string = ",\"minbitrate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MinBitrate))
	}
	if in.MaxBitrate != 0 {
		const prefix string = ",\"maxbitrate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MaxBitrate))
	}
	if in.BoxingAllowed != nil {
		const prefix string = ",\"boxingallowed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(*in.BoxingAllowed))
	}
	if len(in.PlaybackMethods) != 0 {
		const prefix string = ",\"playbackmethod\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v33, v34 := range in.PlaybackMethods {
				if v33 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v34))
			}
			out.RawByte(']')
		}
	}
	if len(in.Delivery) != 0 {
		const prefix string = ",\"delivery\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v35, v36 := range in.Delivery {
				if v35 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v36))
			}
			out.RawByte(']')
		}
	}
	if in.Position != 0 {
		const prefix string = ",\"pos\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Position))
	}
	if len(in.CompanionAds) != 0 {
		const prefix string = ",\"companionad\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v37, v38 := range in.CompanionAds {
				if v37 > 0 {
					out.RawByte(',')
				}
				(v38).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.APIs) != 0 {
		const prefix string = ",\"api\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v39, v40 := range in.APIs {
				if v39 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v40))
			}
			out.RawByte(']')
		}
	}
	if len(in.CompanionTypes) != 0 {
		const prefix string = ",\"companiontype\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v41, v42 := range in.CompanionTypes {
				if v41 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v42))
			}
			out.RawByte(']')
		}
	}
	if in.Placement != 0 {
		const prefix string = ",\"placement\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Placement))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}
